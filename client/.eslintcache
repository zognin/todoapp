[{"/Users/rgs/Documents/Learning/todoapp/client/src/reportWebVitals.js":"1","/Users/rgs/Documents/Learning/todoapp/client/src/index.js":"2","/Users/rgs/Documents/Learning/todoapp/client/src/components/users/Login.tsx":"3","/Users/rgs/Documents/Learning/todoapp/client/src/components/users/ResetPassword.tsx":"4","/Users/rgs/Documents/Learning/todoapp/client/src/components/users/ForgotPassword.tsx":"5","/Users/rgs/Documents/Learning/todoapp/client/src/components/users/Signup.tsx":"6","/Users/rgs/Documents/Learning/todoapp/client/src/components/todos/Home.tsx":"7","/Users/rgs/Documents/Learning/todoapp/client/src/components/todos/TodoEdit.tsx":"8","/Users/rgs/Documents/Learning/todoapp/client/src/components/todos/Todos.tsx":"9","/Users/rgs/Documents/Learning/todoapp/client/src/components/todos/Header.tsx":"10","/Users/rgs/Documents/Learning/todoapp/client/src/components/todos/SuccessAlert.tsx":"11","/Users/rgs/Documents/Learning/todoapp/client/src/components/todos/DeleteAlert.tsx":"12","/Users/rgs/Documents/Learning/todoapp/client/src/components/todos/Search.tsx":"13","/Users/rgs/Documents/Learning/todoapp/client/src/components/todos/SearchCalendar.tsx":"14","/Users/rgs/Documents/Learning/todoapp/client/src/components/svg/PriorityIcon.tsx":"15","/Users/rgs/Documents/Learning/todoapp/client/src/components/svg/SearchIcon.tsx":"16","/Users/rgs/Documents/Learning/todoapp/client/src/components/App.tsx":"17","/Users/rgs/Documents/Learning/todoapp/client/src/components/todos/DeletingAlert.tsx":"18","/Users/rgs/Documents/Learning/todoapp/client/src/components/svg/AddButton.tsx":"19","/Users/rgs/Documents/Learning/todoapp/client/src/components/svg/Trash.tsx":"20","/Users/rgs/Documents/Learning/todoapp/client/src/components/todos/Dropdown.tsx":"21","/Users/rgs/Documents/Learning/todoapp/client/src/components/svg/CheckboxTicked.tsx":"22","/Users/rgs/Documents/Learning/todoapp/client/src/components/todos/TodoCreate.tsx":"23","/Users/rgs/Documents/Learning/todoapp/client/src/components/todos/CalendarView.tsx":"24","/Users/rgs/Documents/Learning/todoapp/client/src/components/todos/Viewbar.tsx":"25","/Users/rgs/Documents/Learning/todoapp/client/src/components/todos/Back.tsx":"26","/Users/rgs/Documents/Learning/todoapp/client/src/components/todos/SearchOptions.tsx":"27","/Users/rgs/Documents/Learning/todoapp/client/src/components/Path.tsx":"28"},{"size":362,"mtime":1608600102011,"results":"29","hashOfConfig":"30"},{"size":558,"mtime":1608876030897,"results":"31","hashOfConfig":"30"},{"size":3975,"mtime":1610846091381,"results":"32","hashOfConfig":"30"},{"size":5200,"mtime":1610846091381,"results":"33","hashOfConfig":"30"},{"size":2055,"mtime":1610846091380,"results":"34","hashOfConfig":"30"},{"size":6412,"mtime":1610846091382,"results":"35","hashOfConfig":"30"},{"size":1482,"mtime":1610967885531,"results":"36","hashOfConfig":"30"},{"size":8112,"mtime":1610967820299,"results":"37","hashOfConfig":"30"},{"size":6202,"mtime":1610967791846,"results":"38","hashOfConfig":"30"},{"size":1260,"mtime":1610860231139,"results":"39","hashOfConfig":"30"},{"size":289,"mtime":1610860969676,"results":"40","hashOfConfig":"30"},{"size":917,"mtime":1610861055583,"results":"41","hashOfConfig":"30"},{"size":3420,"mtime":1610860205486,"results":"42","hashOfConfig":"30"},{"size":4534,"mtime":1610859821476,"results":"43","hashOfConfig":"30"},{"size":1003,"mtime":1610862079666,"results":"44","hashOfConfig":"30"},{"size":1003,"mtime":1610862087545,"results":"45","hashOfConfig":"30"},{"size":1030,"mtime":1610861744062,"results":"46","hashOfConfig":"30"},{"size":295,"mtime":1610860974259,"results":"47","hashOfConfig":"30"},{"size":2739,"mtime":1610861820639,"results":"48","hashOfConfig":"30"},{"size":11545,"mtime":1610862163263,"results":"49","hashOfConfig":"30"},{"size":1029,"mtime":1610860899339,"results":"50","hashOfConfig":"30"},{"size":5029,"mtime":1611152282033,"results":"51","hashOfConfig":"30"},{"size":6212,"mtime":1610888706646,"results":"52","hashOfConfig":"30"},{"size":2610,"mtime":1611998284821,"results":"53","hashOfConfig":"30"},{"size":4599,"mtime":1610943480891,"results":"54","hashOfConfig":"30"},{"size":416,"mtime":1610861685232,"results":"55","hashOfConfig":"30"},{"size":135,"mtime":1610859102070,"results":"56","hashOfConfig":"30"},{"size":261,"mtime":1610861756239,"results":"57","hashOfConfig":"30"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},"wjwkiq",{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"70"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"77"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"77"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"77"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"77"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"115","messages":"116","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"86"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"120","messages":"121","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"86"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},"/Users/rgs/Documents/Learning/todoapp/client/src/reportWebVitals.js",[],["129","130"],"/Users/rgs/Documents/Learning/todoapp/client/src/index.js",[],["131","132"],"/Users/rgs/Documents/Learning/todoapp/client/src/components/users/Login.tsx",[],["133","134"],"/Users/rgs/Documents/Learning/todoapp/client/src/components/users/ResetPassword.tsx",["135"],"import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { useHistory } from 'react-router-dom';\nimport '../App.css';\nimport { productionBackendURL } from '../Path';\n\nconst ResetPassword = () => {\n  // Store user password and password_confirmation\n  const [user, setUser] = useState({\n    password: '',\n    password_confirmation: '',\n  });\n\n  const [valid, setValid] = useState({\n    password: false,\n    password_confirmation: false,\n  });\n  const [error, setError] = useState(false);\n  const [submitError, setSubmitError] = useState(false);\n  const [headerData, setHeaderData] = useState({});\n\n  // To set form input values\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const name = e.target.name;\n    const value = e.target.value;\n    setUser({ ...user, [name]: value });\n  };\n\n  // To get access-token, client and uid from url\n  useEffect(() => {\n    const url = window.location.href;\n    const queryStringIndex = url.indexOf('?');\n    const queryString = url.substring(queryStringIndex + 1);\n    const queryStringParts = queryString.split('&');\n    var parameters: {\n      [key: string]: string;\n    } = {};\n    queryStringParts.forEach((part) => {\n      var equalsIndex = part.indexOf('=');\n      var key: string, value: string;\n      key = part.substring(0, equalsIndex);\n      value = part.substring(equalsIndex + 1);\n      key = decodeURIComponent(key);\n      value = decodeURIComponent(value);\n      parameters[key] = value;\n    });\n    setHeaderData({\n      'access-token': parameters['access-token'],\n      client: parameters.client,\n      uid: parameters.uid,\n    });\n  }, []);\n\n  // To check if password and password_confirmation inputs are valid\n  useEffect(() => {\n    if (\n      user.password.length >= 12 &&\n      user.password === user.password_confirmation\n    ) {\n      setValid({ password: true, password_confirmation: true });\n    } else if (user.password.length < 12) {\n      setValid({ ...valid, password: false });\n    } else {\n      setValid({ password: true, password_confirmation: false });\n    }\n  }, [user.password, user.password_confirmation]);\n\n  let history = useHistory();\n\n  axios.defaults.xsrfCookieName = 'CSRF-TOKEN';\n  axios.defaults.xsrfHeaderName = 'X-CSRF-Token';\n\n  const handleReset = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    if (valid.password && valid.password_confirmation) {\n      setSubmitError(false);\n      axios\n        .put(`${productionBackendURL}/api/v1/auth/password`, null, {\n          params: user,\n          headers: headerData,\n        })\n        .then((resp) => {\n          history.push(`/login`);\n        })\n        .catch((err) => {\n          setError(true);\n        });\n    } else {\n      setSubmitError(true);\n    }\n  };\n\n  return (\n    <div className='user-auth'>\n      {submitError && (\n        <div\n          className='alert alert-danger alert-dismissible fade show'\n          role='alert'\n        >\n          Please ensure all fields are filled in correctly before signing up\n          <button\n            type='button'\n            className='close'\n            aria-label='Close'\n            onClick={() => setSubmitError(false)}\n          >\n            <span aria-hidden='true'>&times;</span>\n          </button>\n        </div>\n      )}\n      {error && (\n        <div\n          className='alert alert-danger alert-dismissible fade show'\n          role='alert'\n        >\n          There is an error, please try again later.\n          <button\n            type='button'\n            className='close'\n            aria-label='Close'\n            onClick={() => setError(false)}\n          >\n            <span aria-hidden='true'>&times;</span>\n          </button>\n        </div>\n      )}\n\n      <form onSubmit={handleReset}>\n        <h1>Reset Password</h1>\n        <div className='form-group'>\n          <label htmlFor='password' className='form-label'>\n            Password\n          </label>\n          <input\n            type='password'\n            className='form-control'\n            id='password'\n            name='password'\n            value={user.password}\n            onChange={handleChange}\n          ></input>\n          {!valid.password && (\n            <small id='passwordHelp' className='form-text text-muted'>\n              Your password should be at least 12 characters\n            </small>\n          )}\n        </div>\n        <br />\n        <div className='form-group'>\n          <label htmlFor='password_confirmation' className='form-label'>\n            Password Confirmation\n          </label>\n          <input\n            type='password'\n            className='form-control'\n            id='password_confirmation'\n            name='password_confirmation'\n            value={user.password_confirmation}\n            onChange={handleChange}\n          ></input>\n          {!valid.password_confirmation && (\n            <small id='passwordHelp' className='form-text text-muted'>\n              Please ensure your passwords match\n            </small>\n          )}\n        </div>\n        <button type='submit' className='btn btn-primary'>\n          Confirm\n        </button>\n      </form>\n    </div>\n  );\n};\n\nexport default ResetPassword;\n",["136","137"],"/Users/rgs/Documents/Learning/todoapp/client/src/components/users/ForgotPassword.tsx",[],["138","139"],"/Users/rgs/Documents/Learning/todoapp/client/src/components/users/Signup.tsx",["140"],"import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { useHistory, Link } from 'react-router-dom';\nimport { productionBackendURL } from '../Path';\n\nconst Signup = () => {\n  const [user, setUser] = useState({\n    email: '',\n    password: '',\n    password_confirmation: '',\n  });\n\n  const [valid, setValid] = useState({\n    email: false,\n    password: false,\n    password_confirmation: false,\n  });\n  const [userAlreadyExists, setUserAlreadyExists] = useState(false);\n  const [error, setError] = useState(false);\n  const [submitError, setSubmitError] = useState(false);\n  const [isSuccessAlert, setIsSuccessAlert] = useState(false);\n\n  //To set form input values\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const name = e.target.name;\n    const value = e.target.value;\n    setUser({ ...user, [name]: value });\n  };\n\n  //Regex to check if email format is valid\n  let pattern = new RegExp(\n    /^((\"[\\w-\\s]+\")|([\\w-]+(?:\\.[\\w-]+)*)|(\"[\\w-\\s]+\")([\\w-]+(?:\\.[\\w-]+)*))(@((?:[\\w-]+\\.)*\\w[\\w-]{0,66})\\.([a-z]{2,6}(?:\\.[a-z]{2})?)$)|(@\\[?((25[0-5]\\.|2[0-4][0-9]\\.|1[0-9]{2}\\.|[0-9]{1,2}\\.))((25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2})\\.){2}(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2})\\]?$)/i\n  );\n\n  //Check if email, password and confirm password inputs are valid\n  useEffect(() => {\n    if (\n      pattern.test(user.email) &&\n      user.password.length >= 12 &&\n      user.password === user.password_confirmation\n    ) {\n      setValid({ email: true, password: true, password_confirmation: true });\n    } else if (!pattern.test(user.email)) {\n      setValid({ ...valid, email: false });\n    } else if (user.password.length < 12) {\n      setValid({ ...valid, email: true, password: false });\n    } else {\n      setValid({ email: true, password: true, password_confirmation: false });\n    }\n  }, [user.email, user.password, user.password_confirmation]);\n\n  let history = useHistory();\n\n  axios.defaults.xsrfCookieName = 'CSRF-TOKEN';\n  axios.defaults.xsrfHeaderName = 'X-CSRF-Token';\n\n  const handleSignup = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    if (valid.email && valid.password && valid.password_confirmation) {\n      setSubmitError(false);\n      axios\n        .post(`${productionBackendURL}/api/v1/auth`, user)\n        .then((resp) => {\n          setIsSuccessAlert(true);\n          setTimeout(() => {\n            setIsSuccessAlert(false);\n            history.push('/login');\n          }, 800);\n        })\n        .catch((err) => {\n          if (err.response.status && err.response.status === 422) {\n            setUserAlreadyExists(true);\n          } else {\n            setError(true);\n          }\n        });\n    } else {\n      setSubmitError(true);\n    }\n  };\n\n  return (\n    <div className='user-auth'>\n      {isSuccessAlert && (\n        <div className='alert alert-success'>\n          Account Created! Redirecting to Login...\n        </div>\n      )}\n      {userAlreadyExists && (\n        <div\n          className='alert alert-info alert-dismissible fade show'\n          role='alert'\n        >\n          User already exists\n          <button\n            type='button'\n            className='close'\n            aria-label='Close'\n            onClick={() => setUserAlreadyExists(false)}\n          >\n            <span aria-hidden='true'>&times;</span>\n          </button>\n        </div>\n      )}\n      {submitError && (\n        <div\n          className='alert alert-danger alert-dismissible fade show'\n          role='alert'\n        >\n          Please ensure all fields are filled in correctly before signing up\n          <button\n            type='button'\n            className='close'\n            aria-label='Close'\n            onClick={() => setSubmitError(false)}\n          >\n            <span aria-hidden='true'>&times;</span>\n          </button>\n        </div>\n      )}\n      {error && (\n        <div\n          className='alert alert-danger alert-dismissible fade show'\n          role='alert'\n        >\n          There is an error, please try again later.\n          <button\n            type='button'\n            className='close'\n            aria-label='Close'\n            onClick={() => setError(false)}\n          >\n            <span aria-hidden='true'>&times;</span>\n          </button>\n        </div>\n      )}\n      <form onSubmit={handleSignup}>\n        <h1>Sign Up</h1>\n        <br />\n        <div className='form-group'>\n          <label htmlFor='email' className='form-label'>\n            Email\n          </label>\n          <input\n            type='email'\n            className='form-control'\n            id='email'\n            name='email'\n            value={user.email}\n            onChange={handleChange}\n          ></input>\n          {!valid.email && (\n            <small id='passwordHelp' className='form-text text-muted'>\n              Please enter a valid email\n            </small>\n          )}\n        </div>\n        <br />\n        <div className='form-group'>\n          <label htmlFor='password' className='form-label'>\n            Password\n          </label>\n          <input\n            type='password'\n            className='form-control'\n            id='password'\n            name='password'\n            value={user.password}\n            onChange={handleChange}\n          ></input>\n          {!valid.password && (\n            <small id='passwordHelp' className='form-text text-muted'>\n              Your password should be at least 12 characters\n            </small>\n          )}\n        </div>\n        <br />\n        <div className='form-group'>\n          <label htmlFor='password_confirmation' className='form-label'>\n            Password Confirmation\n          </label>\n          <input\n            type='password'\n            className='form-control'\n            id='password_confirmation'\n            name='password_confirmation'\n            value={user.password_confirmation}\n            onChange={handleChange}\n          ></input>\n          {!valid.password_confirmation && (\n            <small id='passwordHelp' className='form-text text-muted'>\n              Please ensure your passwords match\n            </small>\n          )}\n        </div>\n        <br />\n        <button type='submit' className='btn btn-primary'>\n          Sign up\n        </button>\n        <br />\n        <Link to='/login'>Or log in if you have an account</Link>\n      </form>\n    </div>\n  );\n};\n\nexport default Signup;\n",["141","142"],"/Users/rgs/Documents/Learning/todoapp/client/src/components/todos/Home.tsx",["143"],"import React, { useState, useEffect } from 'react';\nimport Todos from './Todos';\nimport Header from './Header';\nimport CalendarView from './CalendarView';\nimport axios from 'axios';\nimport '../App.css';\nimport { productionBackendURL } from '../Path';\n\ninterface TodoAttributes {\n  task: string;\n  description: string;\n  category: string;\n  start_time: string;\n  end_time: string;\n  is_completed: boolean;\n  is_priority: boolean;\n  slug: string;\n  user_id: number;\n  id: number;\n}\n\ninterface Todo {\n  attributes: TodoAttributes;\n  id: string;\n  [key: string]: string | object;\n}\n\nconst Home = () => {\n  const [items, setItems] = useState<undefined | Todo[]>([]);\n  const [itemsDisplayed, setItemsDisplayed] = useState<undefined | Todo[]>([]);\n  let headerData = JSON.parse(sessionStorage.userData);\n  const [isUpdate, setIsUpdate] = useState(false);\n\n  useEffect(() => {\n    axios\n      .get(`${productionBackendURL}/api/v1/todos`, {\n        headers: headerData,\n      })\n      .then((res) => {\n        const item = res.data.data;\n        setItems(item);\n        setItemsDisplayed(item);\n      });\n  }, [isUpdate]);\n\n  return (\n    <div>\n      <Header />\n      <div className='view'>\n        <CalendarView items={items} />\n        <Todos\n          items={items}\n          itemsDisplayed={itemsDisplayed}\n          setItemsDisplayed={setItemsDisplayed}\n          isUpdate={isUpdate}\n          setIsUpdate={setIsUpdate}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default Home;\n","/Users/rgs/Documents/Learning/todoapp/client/src/components/todos/TodoEdit.tsx",["144","145"],"import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport '../App.css';\nimport checkboxTicked from '../../images/check-box.png';\nimport checkboxBlank from '../../images/blank-check-box.png';\nimport Calendar from 'react-calendar';\nimport 'react-calendar/dist/Calendar.css';\nimport { useHistory } from 'react-router-dom';\nimport SuccessAlert from './SuccessAlert';\nimport DeleteAlert from './DeleteAlert';\nimport DeletingAlert from './DeletingAlert';\nimport Back from './Back';\nimport { productionBackendURL } from '../Path';\n\nconst TodoEdit = (props: any) => {\n  let headerData = JSON.parse(sessionStorage.userData);\n\n  const [item, setItem] = useState({\n    task: props.location.state.task,\n    description: props.location.state.description,\n    category: props.location.state.category,\n    start_time: props.location.state.start_time,\n    end_time: props.location.state.end_time,\n    is_completed: props.location.state.is_completed,\n    is_priority: props.location.state.is_priority,\n    id: props.location.state.id,\n  });\n\n  const formatLocalTime = (isoDateTime: string) => {\n    const datetime = new Date(isoDateTime);\n    const hours = datetime.getHours();\n    const minutes = datetime.getMinutes();\n    const hoursStr = hours <= 9 ? '0' + hours.toString() : hours.toString();\n    const minutesStr =\n      minutes <= 9 ? '0' + minutes.toString() : minutes.toString();\n    return hoursStr + ':' + minutesStr;\n  };\n\n  const [startDate, setStartDate] = useState<Date | Date[]>(\n    new Date(item.start_time)\n  );\n  const [startTime, setStartTime] = useState(formatLocalTime(item.start_time));\n  const [endDate, setEndDate] = useState<Date | Date[]>(\n    new Date(item.end_time)\n  );\n  const [endTime, setEndTime] = useState(formatLocalTime(item.end_time));\n\n  useEffect(() => {\n    const startDateTime = formatDate(startDate, startTime);\n    if (startDateTime instanceof Date) {\n      const utcString = startDateTime.toISOString();\n      setItem({ ...item, start_time: utcString });\n    }\n  }, [startDate, startTime]);\n\n  useEffect(() => {\n    const endDateTime = formatDate(endDate, endTime);\n    if (endDateTime instanceof Date) {\n      const utcString = endDateTime.toISOString();\n      setItem({ ...item, end_time: utcString });\n    }\n  }, [endDate, endTime]);\n\n  const formatDate = (datetime: Date | Date[], time: string) => {\n    const hour = Number(time.slice(0, 2));\n    const minutes = Number(time.slice(3, 5));\n    if (datetime instanceof Date) {\n      datetime.setHours(hour);\n      datetime.setMinutes(minutes);\n      datetime.setSeconds(0);\n    }\n    return datetime;\n  };\n\n  const [isSuccessAlert, setIsSuccessAlert] = useState(false);\n  const [isDeleteAlert, setIsDeleteAlert] = useState(false);\n  const [isDeletingAlert, setIsDeletingAlert] = useState(false);\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const name = e.target.name;\n    const value = e.target.value;\n    setItem({ ...item, [name]: value });\n  };\n\n  const handleCheckComplete = () => {\n    setItem({ ...item, is_completed: !item.is_completed });\n  };\n  const handleCheckPriority = () => {\n    setItem({ ...item, is_priority: !item.is_priority });\n  };\n\n  const handleSave = (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n    e.preventDefault();\n    axios\n      .put(\n        `${productionBackendURL}/api/v1/todos/${item.id}`,\n        { todo: item },\n        {\n          headers: headerData,\n        }\n      )\n      .then((resp) => {\n        setIsSuccessAlert(true);\n        setTimeout(() => setIsSuccessAlert(false), 800);\n      });\n  };\n\n  let history = useHistory();\n\n  const handleDeleteClick = (\n    e: React.MouseEvent<HTMLButtonElement, MouseEvent>\n  ) => {\n    e.preventDefault();\n    setIsDeleteAlert(true);\n  };\n\n  const handleDelete = (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n    e.preventDefault();\n    setIsDeleteAlert(false);\n    setIsDeletingAlert(true);\n    axios.delete(`${productionBackendURL}/api/v1/todos/${item.id}`, {\n      headers: headerData,\n      data: item,\n    });\n    setTimeout(() => {\n      setIsDeletingAlert(false);\n      history.push('/home');\n    }, 1000);\n  };\n\n  const handleStartEndDate = (value: Date | Date[]) => {\n    setStartDate(value);\n    setEndDate(value);\n  };\n\n  return (\n    <div className='todo-form'>\n      <SuccessAlert isSuccessAlert={isSuccessAlert} />\n      <DeletingAlert isDeletingAlert={isDeletingAlert} />\n      <DeleteAlert\n        isDeleteAlert={isDeleteAlert}\n        handleDelete={handleDelete}\n        setIsDeleteAlert={setIsDeleteAlert}\n      />\n      <form>\n        <h1>Edit</h1>\n        <div className='form-group'>\n          <label htmlFor='task' className='form-label'>\n            Task\n          </label>\n          <input\n            type='text'\n            className='form-control'\n            id='task'\n            name='task'\n            value={item.task}\n            onChange={handleChange}\n          ></input>\n        </div>\n        <div className='form-group'>\n          <label htmlFor='description' className='form-label'>\n            Description\n          </label>\n          <input\n            type='text'\n            className='form-control'\n            id='description'\n            name='description'\n            value={item.description}\n            onChange={handleChange}\n          ></input>\n        </div>\n        <div className='form-group'>\n          <label htmlFor='category' className='form-label'>\n            Category\n          </label>\n          <input\n            type='text'\n            className='form-control'\n            id='category'\n            name='category'\n            value={item.category}\n            onChange={handleChange}\n          ></input>\n        </div>\n        <div>\n          <label htmlFor='start-date' className='form-label'>\n            Start\n          </label>\n          <Calendar\n            onChange={(value) => {\n              handleStartEndDate(value);\n            }}\n            value={new Date(item.start_time)}\n            onClickDay={(startDate) => setStartDate(startDate)}\n          />\n          <input\n            type='time'\n            onChange={(e) => {\n              setStartTime(e.target.value);\n            }}\n            value={startTime}\n          />\n        </div>\n        <br />\n        <div>\n          <label htmlFor='end-date' className='form-label'>\n            End\n          </label>\n          <Calendar\n            onChange={() => setEndDate}\n            value={new Date(item.end_time)}\n            onClickDay={(endDate) => setEndDate(endDate)}\n          />\n          <input\n            type='time'\n            onChange={(e) => {\n              setEndTime(e.target.value);\n            }}\n            value={endTime}\n          />\n        </div>\n        <br />\n        <div onClick={handleCheckComplete}>\n          <label className='checkbox-label'>Completed</label>\n          {item.is_completed ? (\n            <img\n              className='checkbox'\n              src={checkboxTicked}\n              alt='Checkbox Ticked'\n            ></img>\n          ) : (\n            <img\n              className='checkbox'\n              src={checkboxBlank}\n              alt='Checkbox Blank'\n            ></img>\n          )}\n        </div>\n        <br />\n        <div onClick={handleCheckPriority}>\n          <label className='checkbox-label'>Priority</label>\n          {item.is_priority ? (\n            <img\n              className='checkbox'\n              src={checkboxTicked}\n              alt='Checkbox Ticked'\n            ></img>\n          ) : (\n            <img\n              className='checkbox'\n              src={checkboxBlank}\n              alt='Checkbox Blank'\n            ></img>\n          )}\n        </div>\n        <br />\n        <button type='submit' className='btn btn-primary' onClick={handleSave}>\n          Save Changes\n        </button>\n        <br />\n        <Back />\n        <br />\n        <button\n          type='submit'\n          className='btn btn-dark'\n          onClick={handleDeleteClick}\n        >\n          Delete\n        </button>\n      </form>\n    </div>\n  );\n};\n\nexport default TodoEdit;\n","/Users/rgs/Documents/Learning/todoapp/client/src/components/todos/Todos.tsx",[],["146","147"],"/Users/rgs/Documents/Learning/todoapp/client/src/components/todos/Header.tsx",[],"/Users/rgs/Documents/Learning/todoapp/client/src/components/todos/SuccessAlert.tsx",[],"/Users/rgs/Documents/Learning/todoapp/client/src/components/todos/DeleteAlert.tsx",[],"/Users/rgs/Documents/Learning/todoapp/client/src/components/todos/Search.tsx",["148","149"],"import React, { useState, useEffect } from 'react';\nimport '../App.css';\nimport SearchIcon from '../svg/SearchIcon';\nimport Dropdown from './Dropdown';\nimport { searchOptions } from './SearchOptions';\n\ninterface TodoAttributes {\n  task: string;\n  description: string;\n  category: string;\n  start_time: string;\n  end_time: string;\n  is_completed: boolean;\n  is_priority: boolean;\n  slug: string;\n  user_id: number;\n  id: number;\n}\n\ninterface Todo {\n  attributes: TodoAttributes;\n  id: string;\n  [key: string]: string | object;\n}\n\ninterface Props {\n  items: Todo[] | undefined;\n  setItemsDisplayed: React.Dispatch<React.SetStateAction<Todo[] | undefined>>;\n  setIsActiveSearchCalendar: React.Dispatch<React.SetStateAction<boolean>>;\n  selected: string;\n  setSelected: React.Dispatch<React.SetStateAction<string>>;\n}\n\nconst Search: React.FC<Props> = ({\n  items,\n  setItemsDisplayed,\n  setIsActiveSearchCalendar,\n  selected,\n  setSelected,\n}) => {\n  const [input, setInput] = useState('');\n  const [showCard, setShowCard] = useState(false);\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value;\n    setInput(value);\n  };\n\n  function find(input: string) {\n    let regexInput = new RegExp(input, 'i');\n    if (items) {\n      if (selected === 'By Category') {\n        setItemsDisplayed(\n          items.filter((item) => regexInput.test(item.attributes.category))\n        );\n      } else {\n        setItemsDisplayed(\n          items.filter((item) => regexInput.test(item.attributes.task))\n        );\n      }\n    }\n  }\n\n  function reorder() {\n    if (items) {\n      if (selected === 'By Priority') {\n        const priorityItems = items.filter(\n          (item) => item.attributes.is_priority\n        );\n        const nonPriorityItems = items.filter(\n          (item) => !item.attributes.is_priority\n        );\n        const reorderedItems = priorityItems.concat(nonPriorityItems);\n        setItemsDisplayed(reorderedItems);\n      } else if (selected === 'By Completed') {\n        const completedItems = items.filter(\n          (item) => item.attributes.is_completed\n        );\n        const nonCompletedItems = items.filter(\n          (item) => !item.attributes.is_completed\n        );\n        const reorderedItems = completedItems.concat(nonCompletedItems);\n        setItemsDisplayed(reorderedItems);\n      } else {\n        setItemsDisplayed(items);\n      }\n    }\n  }\n\n  useEffect(() => {\n    if (input) {\n      find(input);\n    } else {\n      setItemsDisplayed(items);\n    }\n  }, [input]);\n\n  useEffect(() => {\n    if (selected === 'By Start Date' || selected === 'By End Date') {\n      setIsActiveSearchCalendar(true);\n    } else {\n      reorder();\n    }\n  }, [selected]);\n\n  const handleSelect = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    e.preventDefault();\n    setSelected((e.target as HTMLDivElement).innerHTML);\n    setShowCard(!showCard);\n  };\n\n  return (\n    <div>\n      <div className='search-bar'>\n        <input\n          id='search'\n          name='search'\n          placeholder='Search...'\n          value={input}\n          onChange={handleChange}\n        ></input>\n        <SearchIcon />\n        <Dropdown\n          handleSelect={handleSelect}\n          showCard={showCard}\n          setShowCard={setShowCard}\n          selected={selected}\n          searchOptions={searchOptions}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default Search;\n","/Users/rgs/Documents/Learning/todoapp/client/src/components/todos/SearchCalendar.tsx",[],"/Users/rgs/Documents/Learning/todoapp/client/src/components/svg/PriorityIcon.tsx",[],"/Users/rgs/Documents/Learning/todoapp/client/src/components/svg/SearchIcon.tsx",[],"/Users/rgs/Documents/Learning/todoapp/client/src/components/App.tsx",[],["150","151"],"/Users/rgs/Documents/Learning/todoapp/client/src/components/todos/DeletingAlert.tsx",[],"/Users/rgs/Documents/Learning/todoapp/client/src/components/svg/AddButton.tsx",[],"/Users/rgs/Documents/Learning/todoapp/client/src/components/svg/Trash.tsx",[],"/Users/rgs/Documents/Learning/todoapp/client/src/components/todos/Dropdown.tsx",[],"/Users/rgs/Documents/Learning/todoapp/client/src/components/svg/CheckboxTicked.tsx",[],"/Users/rgs/Documents/Learning/todoapp/client/src/components/todos/TodoCreate.tsx",["152","153"],"import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport '../App.css';\nimport checkboxTicked from '../../images/check-box.png';\nimport checkboxBlank from '../../images/blank-check-box.png';\nimport Calendar from 'react-calendar';\nimport 'react-calendar/dist/Calendar.css';\nimport { useHistory } from 'react-router-dom';\nimport SuccessAlert from './SuccessAlert';\nimport Back from './Back';\nimport { productionBackendURL } from '../Path';\n\nconst TodoCreate = () => {\n  let headerData = JSON.parse(sessionStorage.userData);\n  const [item, setItem] = useState({\n    task: '',\n    description: '',\n    category: '',\n    start_time: '',\n    end_time: '',\n    is_completed: false,\n    is_priority: false,\n  });\n  const [startDate, setStartDate] = useState<Date | Date[]>(new Date());\n  const [startTime, setStartTime] = useState('09:00');\n  const [endDate, setEndDate] = useState<Date | Date[]>(new Date());\n  const [endTime, setEndTime] = useState('10:00');\n\n  useEffect(() => {\n    const startDateTime = formatDate(startDate, startTime);\n    if (startDateTime instanceof Date) {\n      const utcString = startDateTime.toISOString();\n      setItem({ ...item, start_time: utcString });\n    }\n  }, [startDate, startTime]);\n\n  useEffect(() => {\n    const endDateTime = formatDate(endDate, endTime);\n    if (endDateTime instanceof Date) {\n      const utcString = endDateTime.toISOString();\n      setItem({ ...item, end_time: utcString });\n    }\n  }, [endDate, endTime]);\n\n  const formatDate = (datetime: Date | Date[], time: string) => {\n    const hour = Number(time.slice(0, 2));\n    const minutes = Number(time.slice(3, 5));\n    if (datetime instanceof Date) {\n      datetime.setHours(hour);\n      datetime.setMinutes(minutes);\n      datetime.setSeconds(0);\n    }\n    return datetime;\n  };\n\n  const [isSuccessAlert, setIsSuccessAlert] = useState(false);\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const name = e.target.name;\n    const value = e.target.value;\n    setItem({ ...item, [name]: value });\n  };\n\n  const handleCheckComplete = () => {\n    setItem({ ...item, is_completed: !item.is_completed });\n  };\n\n  const handleCheckPriority = () => {\n    setItem({ ...item, is_priority: !item.is_priority });\n  };\n\n  const handleStartEndDate = (value: Date | Date[]) => {\n    setStartDate(value);\n    setEndDate(value);\n  };\n\n  let history = useHistory();\n  const handleSave = (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n    e.preventDefault();\n    axios\n      .post(`${productionBackendURL}/api/v1/todos`, item, {\n        headers: headerData,\n      })\n      .then((resp) => {\n        setIsSuccessAlert(true);\n      });\n    setTimeout(() => {\n      setIsSuccessAlert(false);\n      history.push('/home');\n    }, 800);\n  };\n\n  return (\n    <div className='todo-form'>\n      <SuccessAlert isSuccessAlert={isSuccessAlert} />\n      <form>\n        <h1>New Task</h1>\n        <div className='form-group'>\n          <label htmlFor='task' className='form-label'>\n            Task\n          </label>\n          <input\n            type='text'\n            className='form-control'\n            id='task'\n            name='task'\n            value={item.task}\n            onChange={handleChange}\n          ></input>\n        </div>\n        <div className='form-group'>\n          <label htmlFor='description' className='form-label'>\n            Description\n          </label>\n          <input\n            type='text'\n            className='form-control'\n            id='description'\n            name='description'\n            value={item.description}\n            onChange={handleChange}\n          ></input>\n        </div>\n        <div className='form-group'>\n          <label htmlFor='category' className='form-label'>\n            Category\n          </label>\n          <input\n            type='text'\n            className='form-control'\n            id='category'\n            name='category'\n            value={item.category}\n            onChange={handleChange}\n          ></input>\n        </div>\n        <div>\n          <label htmlFor='start-date' className='form-label'>\n            Start\n          </label>\n          <Calendar\n            onChange={(value) => {\n              handleStartEndDate(value);\n            }}\n            value={startDate}\n            onClickDay={(startDate) => setStartDate(startDate)}\n          />\n          <input\n            type='time'\n            onChange={(e) => {\n              setStartTime(e.target.value);\n            }}\n            value={startTime}\n          />\n        </div>\n        <br />\n        <div>\n          <label htmlFor='end-date' className='form-label'>\n            End\n          </label>\n          <Calendar\n            onChange={setEndDate}\n            value={endDate}\n            onClickDay={(endDate) => setEndDate(endDate)}\n          />\n          <input\n            type='time'\n            onChange={(e) => {\n              setEndTime(e.target.value);\n            }}\n            value={endTime}\n          />\n        </div>\n        <br />\n        <div onClick={handleCheckComplete}>\n          <label className='checkbox-label'>Completed</label>\n          {item.is_completed ? (\n            <img\n              className='checkbox'\n              src={checkboxTicked}\n              alt='Checkbox Ticked'\n            ></img>\n          ) : (\n            <img\n              className='checkbox'\n              src={checkboxBlank}\n              alt='Checkbox Blank'\n            ></img>\n          )}\n        </div>\n        <br />\n        <div onClick={handleCheckPriority}>\n          <label className='checkbox-label'>Priority</label>\n          {item.is_priority ? (\n            <img\n              className='checkbox'\n              src={checkboxTicked}\n              alt='Checkbox Ticked'\n            ></img>\n          ) : (\n            <img\n              className='checkbox'\n              src={checkboxBlank}\n              alt='Checkbox Blank'\n            ></img>\n          )}\n        </div>\n        <br />\n        <button type='submit' className='btn btn-primary' onClick={handleSave}>\n          Save Changes\n        </button>\n        <br />\n        <Back />\n      </form>\n    </div>\n  );\n};\n\nexport default TodoCreate;\n","/Users/rgs/Documents/Learning/todoapp/client/src/components/todos/CalendarView.tsx",[],"/Users/rgs/Documents/Learning/todoapp/client/src/components/todos/Viewbar.tsx",["154","155","156"],"import React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport Dropdown from './Dropdown';\nimport AddButton from '../svg/AddButton';\nimport DeleteAlert from './DeleteAlert';\n\ninterface TodoAttributes {\n  task: string;\n  description: string;\n  category: string;\n  start_time: string;\n  end_time: string;\n  is_completed: boolean;\n  is_priority: boolean;\n  slug: string;\n  user_id: number;\n  id: number;\n}\n\ninterface Todo {\n  attributes: TodoAttributes;\n  id: string;\n  [key: string]: string | object;\n}\n\ninterface DeleteData {\n  id: string | string[];\n}\n\ninterface Props {\n  items: undefined | Todo[];\n  setItemsDisplayed: React.Dispatch<React.SetStateAction<Todo[] | undefined>>;\n  setIsDeleteAlert: React.Dispatch<React.SetStateAction<boolean>>;\n  setDeleteData: React.Dispatch<React.SetStateAction<DeleteData>>;\n}\n\nconst Viewbar: React.FC<Props> = ({\n  items,\n  setItemsDisplayed,\n  setIsDeleteAlert,\n  setDeleteData,\n}) => {\n  let categoriesToAdd = [\n    'All',\n    'Priority',\n    'Completed',\n    'Incomplete',\n    'Start Date Order',\n    'End Date Order',\n  ];\n  const [viewOptions, setViewOptions] = useState(categoriesToAdd);\n  const [showCard, setShowCard] = useState(false);\n  const [selected, setSelected] = useState(viewOptions[0]);\n\n  useEffect(() => {\n    categoriesToAdd = [\n      'All',\n      'Priority',\n      'Completed',\n      'Incomplete',\n      'Start Date Order',\n      'End Date Order',\n    ];\n    if (items) {\n      for (let i = 0; i < items.length; i++) {\n        const category = items[i].attributes.category;\n        if (category && !categoriesToAdd.includes(category)) {\n          categoriesToAdd.push(category);\n        }\n      }\n    }\n    setViewOptions(categoriesToAdd);\n  }, [items]);\n\n  const handleSelect = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    e.preventDefault();\n    setSelected((e.target as HTMLDivElement).innerHTML);\n    setShowCard(!showCard);\n  };\n\n  let deleteIds = [];\n\n  const handleDeleteClick = (\n    e: React.MouseEvent<HTMLButtonElement, MouseEvent>\n  ) => {\n    e.preventDefault();\n    deleteIds = [];\n    if (items) {\n      for (let i = 0; i < items.length; i++) {\n        if (items[i].attributes.is_completed) {\n          deleteIds.push(items[i].id);\n        }\n      }\n    }\n    setDeleteData({ id: deleteIds });\n    setIsDeleteAlert(true);\n  };\n\n  const sortStartDate = (a: Todo, b: Todo) =>\n    a.attributes.start_time < b.attributes.start_time\n      ? -1\n      : a.attributes.start_time > b.attributes.start_time\n      ? 1\n      : 0;\n  const sortEndDate = (a: Todo, b: Todo) =>\n    a.attributes.end_time < b.attributes.end_time\n      ? -1\n      : a.attributes.end_time > b.attributes.end_time\n      ? 1\n      : 0;\n\n  useEffect(() => {\n    if (items) {\n      if (selected === 'Priority') {\n        const priorityItems = items.filter(\n          (item) => item.attributes.is_priority\n        );\n        setItemsDisplayed(priorityItems);\n      } else if (selected === 'Completed') {\n        const completedItems = items.filter(\n          (item) => item.attributes.is_completed\n        );\n        setItemsDisplayed(completedItems);\n      } else if (selected === 'Incomplete') {\n        const incompleteItems = items.filter(\n          (item) => !item.attributes.is_completed\n        );\n        setItemsDisplayed(incompleteItems);\n      } else if (selected === 'All') {\n        setItemsDisplayed(items);\n      } else if (selected === 'Start Date Order') {\n        const sorted = items.slice().sort(sortStartDate);\n        setItemsDisplayed(sorted);\n      } else if (selected === 'End Date Order') {\n        const sorted = items.slice().sort(sortEndDate);\n        setItemsDisplayed(sorted);\n      } else {\n        const displayItems = items.filter(\n          (item) => item.attributes.category === selected\n        );\n        setItemsDisplayed(displayItems);\n      }\n    }\n  }, [selected]);\n\n  return (\n    <div className='viewbar-container'>\n      <div className='viewbar'>\n        <div className='view-text'>View: </div>\n        <Dropdown\n          handleSelect={handleSelect}\n          showCard={showCard}\n          setShowCard={setShowCard}\n          selected={selected}\n          searchOptions={viewOptions}\n        />\n        <div className='todolist-icons-container'>\n          <Link to='/todo/new' className='nav-link active' aria-current='page'>\n            <AddButton />\n          </Link>\n          <button className='btn btn-info' onClick={handleDeleteClick}>\n            Delete all Completed\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Viewbar;\n","/Users/rgs/Documents/Learning/todoapp/client/src/components/todos/Back.tsx",[],"/Users/rgs/Documents/Learning/todoapp/client/src/components/todos/SearchOptions.tsx",[],"/Users/rgs/Documents/Learning/todoapp/client/src/components/Path.tsx",[],{"ruleId":"157","replacedBy":"158"},{"ruleId":"159","replacedBy":"160"},{"ruleId":"157","replacedBy":"161"},{"ruleId":"159","replacedBy":"162"},{"ruleId":"157","replacedBy":"163"},{"ruleId":"159","replacedBy":"164"},{"ruleId":"165","severity":1,"message":"166","line":66,"column":6,"nodeType":"167","endLine":66,"endColumn":49,"suggestions":"168"},{"ruleId":"157","replacedBy":"169"},{"ruleId":"159","replacedBy":"170"},{"ruleId":"157","replacedBy":"171"},{"ruleId":"159","replacedBy":"172"},{"ruleId":"165","severity":1,"message":"173","line":50,"column":6,"nodeType":"167","endLine":50,"endColumn":61,"suggestions":"174"},{"ruleId":"157","replacedBy":"161"},{"ruleId":"159","replacedBy":"162"},{"ruleId":"165","severity":1,"message":"175","line":44,"column":6,"nodeType":"167","endLine":44,"endColumn":16,"suggestions":"176"},{"ruleId":"165","severity":1,"message":"177","line":54,"column":6,"nodeType":"167","endLine":54,"endColumn":28,"suggestions":"178"},{"ruleId":"165","severity":1,"message":"177","line":62,"column":6,"nodeType":"167","endLine":62,"endColumn":24,"suggestions":"179"},{"ruleId":"157","replacedBy":"158"},{"ruleId":"159","replacedBy":"160"},{"ruleId":"165","severity":1,"message":"180","line":96,"column":6,"nodeType":"167","endLine":96,"endColumn":13,"suggestions":"181"},{"ruleId":"165","severity":1,"message":"182","line":104,"column":6,"nodeType":"167","endLine":104,"endColumn":16,"suggestions":"183"},{"ruleId":"157","replacedBy":"184"},{"ruleId":"159","replacedBy":"185"},{"ruleId":"165","severity":1,"message":"177","line":35,"column":6,"nodeType":"167","endLine":35,"endColumn":28,"suggestions":"186"},{"ruleId":"165","severity":1,"message":"177","line":43,"column":6,"nodeType":"167","endLine":43,"endColumn":24,"suggestions":"187"},{"ruleId":"188","severity":1,"message":"189","line":5,"column":8,"nodeType":"190","messageId":"191","endLine":5,"endColumn":19},{"ruleId":"165","severity":1,"message":"192","line":56,"column":23,"nodeType":"167","endLine":63,"endColumn":6},{"ruleId":"165","severity":1,"message":"193","line":144,"column":6,"nodeType":"167","endLine":144,"endColumn":16,"suggestions":"194"},"no-native-reassign",["195"],"no-negated-in-lhs",["196"],["195"],["196"],["195"],["196"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'valid'. Either include it or remove the dependency array. You can also do a functional update 'setValid(v => ...)' if you only need 'valid' in the 'setValid' call.","ArrayExpression",["197"],["195"],["196"],["195"],["196"],"React Hook useEffect has missing dependencies: 'pattern' and 'valid'. Either include them or remove the dependency array. You can also do a functional update 'setValid(v => ...)' if you only need 'valid' in the 'setValid' call.",["198"],"React Hook useEffect has a missing dependency: 'headerData'. Either include it or remove the dependency array.",["199"],"React Hook useEffect has a missing dependency: 'item'. Either include it or remove the dependency array. You can also do a functional update 'setItem(i => ...)' if you only need 'item' in the 'setItem' call.",["200"],["201"],"React Hook useEffect has missing dependencies: 'find', 'items', and 'setItemsDisplayed'. Either include them or remove the dependency array. If 'setItemsDisplayed' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["202"],"React Hook useEffect has missing dependencies: 'reorder' and 'setIsActiveSearchCalendar'. Either include them or remove the dependency array. If 'setIsActiveSearchCalendar' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["203"],["195"],["196"],["204"],["205"],"@typescript-eslint/no-unused-vars","'DeleteAlert' is defined but never used.","Identifier","unusedVar","Assignments to the 'categoriesToAdd' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","React Hook useEffect has missing dependencies: 'items' and 'setItemsDisplayed'. Either include them or remove the dependency array. If 'setItemsDisplayed' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["206"],"no-global-assign","no-unsafe-negation",{"desc":"207","fix":"208"},{"desc":"209","fix":"210"},{"desc":"211","fix":"212"},{"desc":"213","fix":"214"},{"desc":"215","fix":"216"},{"desc":"217","fix":"218"},{"desc":"219","fix":"220"},{"desc":"213","fix":"221"},{"desc":"215","fix":"222"},{"desc":"223","fix":"224"},"Update the dependencies array to be: [user.password, user.password_confirmation, valid]",{"range":"225","text":"226"},"Update the dependencies array to be: [pattern, user.email, user.password, user.password_confirmation, valid]",{"range":"227","text":"228"},"Update the dependencies array to be: [headerData, isUpdate]",{"range":"229","text":"230"},"Update the dependencies array to be: [item, startDate, startTime]",{"range":"231","text":"232"},"Update the dependencies array to be: [endDate, endTime, item]",{"range":"233","text":"234"},"Update the dependencies array to be: [find, input, items, setItemsDisplayed]",{"range":"235","text":"236"},"Update the dependencies array to be: [reorder, selected, setIsActiveSearchCalendar]",{"range":"237","text":"238"},{"range":"239","text":"232"},{"range":"240","text":"234"},"Update the dependencies array to be: [items, selected, setItemsDisplayed]",{"range":"241","text":"242"},[2087,2130],"[user.password, user.password_confirmation, valid]",[1846,1901],"[pattern, user.email, user.password, user.password_confirmation, valid]",[1102,1112],"[headerData, isUpdate]",[2023,2045],"[item, startDate, startTime]",[2273,2291],"[endDate, endTime, item]",[2523,2530],"[find, input, items, setItemsDisplayed]",[2704,2714],"[reorder, selected, setIsActiveSearchCalendar]",[1218,1240],[1468,1486],[3881,3891],"[items, selected, setItemsDisplayed]"]