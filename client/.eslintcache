[{"/Users/rgs/Documents/Learning/todoapp/client/src/reportWebVitals.js":"1","/Users/rgs/Documents/Learning/todoapp/client/src/index.js":"2","/Users/rgs/Documents/Learning/todoapp/client/src/components/users/Login.tsx":"3","/Users/rgs/Documents/Learning/todoapp/client/src/components/users/ResetPassword.tsx":"4","/Users/rgs/Documents/Learning/todoapp/client/src/components/users/ForgotPassword.tsx":"5","/Users/rgs/Documents/Learning/todoapp/client/src/components/users/Signup.tsx":"6","/Users/rgs/Documents/Learning/todoapp/client/src/components/todos/Home.tsx":"7","/Users/rgs/Documents/Learning/todoapp/client/src/components/todos/TodoEdit.tsx":"8","/Users/rgs/Documents/Learning/todoapp/client/src/components/todos/Todos.tsx":"9","/Users/rgs/Documents/Learning/todoapp/client/src/components/todos/Header.tsx":"10","/Users/rgs/Documents/Learning/todoapp/client/src/components/todos/SuccessAlert.tsx":"11","/Users/rgs/Documents/Learning/todoapp/client/src/components/todos/DeleteAlert.tsx":"12","/Users/rgs/Documents/Learning/todoapp/client/src/components/todos/Search.tsx":"13","/Users/rgs/Documents/Learning/todoapp/client/src/components/todos/SearchCalendar.tsx":"14","/Users/rgs/Documents/Learning/todoapp/client/src/components/svg/PriorityIcon.tsx":"15","/Users/rgs/Documents/Learning/todoapp/client/src/components/svg/SearchIcon.tsx":"16","/Users/rgs/Documents/Learning/todoapp/client/src/components/App.tsx":"17"},{"size":362,"mtime":1608600102011,"results":"18","hashOfConfig":"19"},{"size":558,"mtime":1608876030897,"results":"20","hashOfConfig":"19"},{"size":3975,"mtime":1610846091381,"results":"21","hashOfConfig":"19"},{"size":5200,"mtime":1610846091381,"results":"22","hashOfConfig":"19"},{"size":2055,"mtime":1610846091380,"results":"23","hashOfConfig":"19"},{"size":6412,"mtime":1610846091382,"results":"24","hashOfConfig":"19"},{"size":1509,"mtime":1610854144425,"results":"25","hashOfConfig":"19"},{"size":8262,"mtime":1610862717001,"results":"26","hashOfConfig":"19"},{"size":6361,"mtime":1610862221700,"results":"27","hashOfConfig":"19"},{"size":1260,"mtime":1610860231139,"results":"28","hashOfConfig":"19"},{"size":289,"mtime":1610860969676,"results":"29","hashOfConfig":"19"},{"size":917,"mtime":1610861055583,"results":"30","hashOfConfig":"19"},{"size":3420,"mtime":1610860205486,"results":"31","hashOfConfig":"19"},{"size":4534,"mtime":1610859821476,"results":"32","hashOfConfig":"19"},{"size":1003,"mtime":1610862079666,"results":"33","hashOfConfig":"19"},{"size":1003,"mtime":1610862087545,"results":"34","hashOfConfig":"19"},{"size":1030,"mtime":1610861744062,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"wjwkiq",{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"43"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"49"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"43"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/rgs/Documents/Learning/todoapp/client/src/reportWebVitals.js",[],["76","77"],"/Users/rgs/Documents/Learning/todoapp/client/src/index.js",[],"/Users/rgs/Documents/Learning/todoapp/client/src/components/users/Login.tsx",[],["78","79"],"/Users/rgs/Documents/Learning/todoapp/client/src/components/users/ResetPassword.tsx",["80"],"import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { useHistory } from 'react-router-dom';\nimport '../App.css';\nimport { productionBackendURL } from '../Path';\n\nconst ResetPassword = () => {\n  // Store user password and password_confirmation\n  const [user, setUser] = useState({\n    password: '',\n    password_confirmation: '',\n  });\n\n  const [valid, setValid] = useState({\n    password: false,\n    password_confirmation: false,\n  });\n  const [error, setError] = useState(false);\n  const [submitError, setSubmitError] = useState(false);\n  const [headerData, setHeaderData] = useState({});\n\n  // To set form input values\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const name = e.target.name;\n    const value = e.target.value;\n    setUser({ ...user, [name]: value });\n  };\n\n  // To get access-token, client and uid from url\n  useEffect(() => {\n    const url = window.location.href;\n    const queryStringIndex = url.indexOf('?');\n    const queryString = url.substring(queryStringIndex + 1);\n    const queryStringParts = queryString.split('&');\n    var parameters: {\n      [key: string]: string;\n    } = {};\n    queryStringParts.forEach((part) => {\n      var equalsIndex = part.indexOf('=');\n      var key: string, value: string;\n      key = part.substring(0, equalsIndex);\n      value = part.substring(equalsIndex + 1);\n      key = decodeURIComponent(key);\n      value = decodeURIComponent(value);\n      parameters[key] = value;\n    });\n    setHeaderData({\n      'access-token': parameters['access-token'],\n      client: parameters.client,\n      uid: parameters.uid,\n    });\n  }, []);\n\n  // To check if password and password_confirmation inputs are valid\n  useEffect(() => {\n    if (\n      user.password.length >= 12 &&\n      user.password === user.password_confirmation\n    ) {\n      setValid({ password: true, password_confirmation: true });\n    } else if (user.password.length < 12) {\n      setValid({ ...valid, password: false });\n    } else {\n      setValid({ password: true, password_confirmation: false });\n    }\n  }, [user.password, user.password_confirmation]);\n\n  let history = useHistory();\n\n  axios.defaults.xsrfCookieName = 'CSRF-TOKEN';\n  axios.defaults.xsrfHeaderName = 'X-CSRF-Token';\n\n  const handleReset = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    if (valid.password && valid.password_confirmation) {\n      setSubmitError(false);\n      axios\n        .put(`${productionBackendURL}/api/v1/auth/password`, null, {\n          params: user,\n          headers: headerData,\n        })\n        .then((resp) => {\n          history.push(`/login`);\n        })\n        .catch((err) => {\n          setError(true);\n        });\n    } else {\n      setSubmitError(true);\n    }\n  };\n\n  return (\n    <div className='user-auth'>\n      {submitError && (\n        <div\n          className='alert alert-danger alert-dismissible fade show'\n          role='alert'\n        >\n          Please ensure all fields are filled in correctly before signing up\n          <button\n            type='button'\n            className='close'\n            aria-label='Close'\n            onClick={() => setSubmitError(false)}\n          >\n            <span aria-hidden='true'>&times;</span>\n          </button>\n        </div>\n      )}\n      {error && (\n        <div\n          className='alert alert-danger alert-dismissible fade show'\n          role='alert'\n        >\n          There is an error, please try again later.\n          <button\n            type='button'\n            className='close'\n            aria-label='Close'\n            onClick={() => setError(false)}\n          >\n            <span aria-hidden='true'>&times;</span>\n          </button>\n        </div>\n      )}\n\n      <form onSubmit={handleReset}>\n        <h1>Reset Password</h1>\n        <div className='form-group'>\n          <label htmlFor='password' className='form-label'>\n            Password\n          </label>\n          <input\n            type='password'\n            className='form-control'\n            id='password'\n            name='password'\n            value={user.password}\n            onChange={handleChange}\n          ></input>\n          {!valid.password && (\n            <small id='passwordHelp' className='form-text text-muted'>\n              Your password should be at least 12 characters\n            </small>\n          )}\n        </div>\n        <br />\n        <div className='form-group'>\n          <label htmlFor='password_confirmation' className='form-label'>\n            Password Confirmation\n          </label>\n          <input\n            type='password'\n            className='form-control'\n            id='password_confirmation'\n            name='password_confirmation'\n            value={user.password_confirmation}\n            onChange={handleChange}\n          ></input>\n          {!valid.password_confirmation && (\n            <small id='passwordHelp' className='form-text text-muted'>\n              Please ensure your passwords match\n            </small>\n          )}\n        </div>\n        <button type='submit' className='btn btn-primary'>\n          Confirm\n        </button>\n      </form>\n    </div>\n  );\n};\n\nexport default ResetPassword;\n","/Users/rgs/Documents/Learning/todoapp/client/src/components/users/ForgotPassword.tsx",[],["81","82"],"/Users/rgs/Documents/Learning/todoapp/client/src/components/users/Signup.tsx",["83"],"import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { useHistory, Link } from 'react-router-dom';\nimport { productionBackendURL } from '../Path';\n\nconst Signup = () => {\n  const [user, setUser] = useState({\n    email: '',\n    password: '',\n    password_confirmation: '',\n  });\n\n  const [valid, setValid] = useState({\n    email: false,\n    password: false,\n    password_confirmation: false,\n  });\n  const [userAlreadyExists, setUserAlreadyExists] = useState(false);\n  const [error, setError] = useState(false);\n  const [submitError, setSubmitError] = useState(false);\n  const [isSuccessAlert, setIsSuccessAlert] = useState(false);\n\n  //To set form input values\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const name = e.target.name;\n    const value = e.target.value;\n    setUser({ ...user, [name]: value });\n  };\n\n  //Regex to check if email format is valid\n  let pattern = new RegExp(\n    /^((\"[\\w-\\s]+\")|([\\w-]+(?:\\.[\\w-]+)*)|(\"[\\w-\\s]+\")([\\w-]+(?:\\.[\\w-]+)*))(@((?:[\\w-]+\\.)*\\w[\\w-]{0,66})\\.([a-z]{2,6}(?:\\.[a-z]{2})?)$)|(@\\[?((25[0-5]\\.|2[0-4][0-9]\\.|1[0-9]{2}\\.|[0-9]{1,2}\\.))((25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2})\\.){2}(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2})\\]?$)/i\n  );\n\n  //Check if email, password and confirm password inputs are valid\n  useEffect(() => {\n    if (\n      pattern.test(user.email) &&\n      user.password.length >= 12 &&\n      user.password === user.password_confirmation\n    ) {\n      setValid({ email: true, password: true, password_confirmation: true });\n    } else if (!pattern.test(user.email)) {\n      setValid({ ...valid, email: false });\n    } else if (user.password.length < 12) {\n      setValid({ ...valid, email: true, password: false });\n    } else {\n      setValid({ email: true, password: true, password_confirmation: false });\n    }\n  }, [user.email, user.password, user.password_confirmation]);\n\n  let history = useHistory();\n\n  axios.defaults.xsrfCookieName = 'CSRF-TOKEN';\n  axios.defaults.xsrfHeaderName = 'X-CSRF-Token';\n\n  const handleSignup = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    if (valid.email && valid.password && valid.password_confirmation) {\n      setSubmitError(false);\n      axios\n        .post(`${productionBackendURL}/api/v1/auth`, user)\n        .then((resp) => {\n          setIsSuccessAlert(true);\n          setTimeout(() => {\n            setIsSuccessAlert(false);\n            history.push('/login');\n          }, 800);\n        })\n        .catch((err) => {\n          if (err.response.status && err.response.status === 422) {\n            setUserAlreadyExists(true);\n          } else {\n            setError(true);\n          }\n        });\n    } else {\n      setSubmitError(true);\n    }\n  };\n\n  return (\n    <div className='user-auth'>\n      {isSuccessAlert && (\n        <div className='alert alert-success'>\n          Account Created! Redirecting to Login...\n        </div>\n      )}\n      {userAlreadyExists && (\n        <div\n          className='alert alert-info alert-dismissible fade show'\n          role='alert'\n        >\n          User already exists\n          <button\n            type='button'\n            className='close'\n            aria-label='Close'\n            onClick={() => setUserAlreadyExists(false)}\n          >\n            <span aria-hidden='true'>&times;</span>\n          </button>\n        </div>\n      )}\n      {submitError && (\n        <div\n          className='alert alert-danger alert-dismissible fade show'\n          role='alert'\n        >\n          Please ensure all fields are filled in correctly before signing up\n          <button\n            type='button'\n            className='close'\n            aria-label='Close'\n            onClick={() => setSubmitError(false)}\n          >\n            <span aria-hidden='true'>&times;</span>\n          </button>\n        </div>\n      )}\n      {error && (\n        <div\n          className='alert alert-danger alert-dismissible fade show'\n          role='alert'\n        >\n          There is an error, please try again later.\n          <button\n            type='button'\n            className='close'\n            aria-label='Close'\n            onClick={() => setError(false)}\n          >\n            <span aria-hidden='true'>&times;</span>\n          </button>\n        </div>\n      )}\n      <form onSubmit={handleSignup}>\n        <h1>Sign Up</h1>\n        <br />\n        <div className='form-group'>\n          <label htmlFor='email' className='form-label'>\n            Email\n          </label>\n          <input\n            type='email'\n            className='form-control'\n            id='email'\n            name='email'\n            value={user.email}\n            onChange={handleChange}\n          ></input>\n          {!valid.email && (\n            <small id='passwordHelp' className='form-text text-muted'>\n              Please enter a valid email\n            </small>\n          )}\n        </div>\n        <br />\n        <div className='form-group'>\n          <label htmlFor='password' className='form-label'>\n            Password\n          </label>\n          <input\n            type='password'\n            className='form-control'\n            id='password'\n            name='password'\n            value={user.password}\n            onChange={handleChange}\n          ></input>\n          {!valid.password && (\n            <small id='passwordHelp' className='form-text text-muted'>\n              Your password should be at least 12 characters\n            </small>\n          )}\n        </div>\n        <br />\n        <div className='form-group'>\n          <label htmlFor='password_confirmation' className='form-label'>\n            Password Confirmation\n          </label>\n          <input\n            type='password'\n            className='form-control'\n            id='password_confirmation'\n            name='password_confirmation'\n            value={user.password_confirmation}\n            onChange={handleChange}\n          ></input>\n          {!valid.password_confirmation && (\n            <small id='passwordHelp' className='form-text text-muted'>\n              Please ensure your passwords match\n            </small>\n          )}\n        </div>\n        <br />\n        <button type='submit' className='btn btn-primary'>\n          Sign up\n        </button>\n        <br />\n        <Link to='/login'>Or log in if you have an account</Link>\n      </form>\n    </div>\n  );\n};\n\nexport default Signup;\n","/Users/rgs/Documents/Learning/todoapp/client/src/components/todos/Home.tsx",["84"],"import React, { useState, useEffect } from 'react';\nimport Todos from './Todos';\nimport Header from './Header';\nimport CalendarView from './CalendarView';\nimport axios from 'axios';\nimport '../App.css';\nimport { productionBackendURL } from '../Path';\n\ninterface TodoAttributes {\n  task: string;\n  description: string;\n  category: string;\n  start_time: string;\n  end_time: string;\n  is_completed: boolean;\n  is_priority: boolean;\n  slug: string;\n  user_id: number;\n  id: number;\n}\n\ninterface Todo {\n  attributes: TodoAttributes;\n  id: string;\n  [key: string]: string | object;\n}\n\nconst Home = () => {\n  const [items, setItems] = useState<undefined | Todo[]>([]);\n  const [itemsDisplayed, setItemsDisplayed] = useState<undefined | Todo[]>([]);\n  let headerData = JSON.parse(sessionStorage.userData);\n  const [isUpdate, setIsUpdate] = useState(false);\n\n  useEffect(() => {\n    axios\n      .get(`${productionBackendURL}/api/v1/todos`, {\n        headers: headerData,\n      })\n      .then((res) => {\n        const item = res.data.data;\n        setItems(item);\n        setItemsDisplayed(item);\n        console.log(item);\n      });\n  }, [isUpdate]);\n\n  return (\n    <div>\n      <Header />\n      <div className='view'>\n        <CalendarView items={items} />\n        <Todos\n          items={items}\n          itemsDisplayed={itemsDisplayed}\n          setItemsDisplayed={setItemsDisplayed}\n          isUpdate={isUpdate}\n          setIsUpdate={setIsUpdate}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default Home;\n","/Users/rgs/Documents/Learning/todoapp/client/src/components/todos/TodoEdit.tsx",["85","86","87"],"/Users/rgs/Documents/Learning/todoapp/client/src/components/todos/Todos.tsx",[],"/Users/rgs/Documents/Learning/todoapp/client/src/components/todos/Header.tsx",[],"/Users/rgs/Documents/Learning/todoapp/client/src/components/todos/SuccessAlert.tsx",[],"/Users/rgs/Documents/Learning/todoapp/client/src/components/todos/DeleteAlert.tsx",[],"/Users/rgs/Documents/Learning/todoapp/client/src/components/todos/Search.tsx",["88","89"],"/Users/rgs/Documents/Learning/todoapp/client/src/components/todos/SearchCalendar.tsx",[],"/Users/rgs/Documents/Learning/todoapp/client/src/components/svg/PriorityIcon.tsx",[],"/Users/rgs/Documents/Learning/todoapp/client/src/components/svg/SearchIcon.tsx",[],"/Users/rgs/Documents/Learning/todoapp/client/src/components/App.tsx",[],{"ruleId":"90","replacedBy":"91"},{"ruleId":"92","replacedBy":"93"},{"ruleId":"90","replacedBy":"94"},{"ruleId":"92","replacedBy":"95"},{"ruleId":"96","severity":1,"message":"97","line":66,"column":6,"nodeType":"98","endLine":66,"endColumn":49,"suggestions":"99"},{"ruleId":"90","replacedBy":"100"},{"ruleId":"92","replacedBy":"101"},{"ruleId":"96","severity":1,"message":"102","line":50,"column":6,"nodeType":"98","endLine":50,"endColumn":61,"suggestions":"103"},{"ruleId":"96","severity":1,"message":"104","line":45,"column":6,"nodeType":"98","endLine":45,"endColumn":16,"suggestions":"105"},{"ruleId":"96","severity":1,"message":"106","line":53,"column":6,"nodeType":"98","endLine":53,"endColumn":28,"suggestions":"107"},{"ruleId":"96","severity":1,"message":"106","line":61,"column":6,"nodeType":"98","endLine":61,"endColumn":24,"suggestions":"108"},{"ruleId":"96","severity":1,"message":"109","line":87,"column":6,"nodeType":"98","endLine":87,"endColumn":8,"suggestions":"110"},{"ruleId":"96","severity":1,"message":"111","line":96,"column":6,"nodeType":"98","endLine":96,"endColumn":13,"suggestions":"112"},{"ruleId":"96","severity":1,"message":"113","line":104,"column":6,"nodeType":"98","endLine":104,"endColumn":16,"suggestions":"114"},"no-native-reassign",["115"],"no-negated-in-lhs",["116"],["115"],["116"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'valid'. Either include it or remove the dependency array. You can also do a functional update 'setValid(v => ...)' if you only need 'valid' in the 'setValid' call.","ArrayExpression",["117"],["115"],["116"],"React Hook useEffect has missing dependencies: 'pattern' and 'valid'. Either include them or remove the dependency array. You can also do a functional update 'setValid(v => ...)' if you only need 'valid' in the 'setValid' call.",["118"],"React Hook useEffect has a missing dependency: 'headerData'. Either include it or remove the dependency array.",["119"],"React Hook useEffect has a missing dependency: 'item'. Either include it or remove the dependency array. You can also do a functional update 'setItem(i => ...)' if you only need 'item' in the 'setItem' call.",["120"],["121"],"React Hook useEffect has missing dependencies: 'headerData' and 'id'. Either include them or remove the dependency array.",["122"],"React Hook useEffect has missing dependencies: 'find', 'items', and 'setItemsDisplayed'. Either include them or remove the dependency array. If 'setItemsDisplayed' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["123"],"React Hook useEffect has missing dependencies: 'reorder' and 'setIsActiveSearchCalendar'. Either include them or remove the dependency array. If 'setIsActiveSearchCalendar' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["124"],"no-global-assign","no-unsafe-negation",{"desc":"125","fix":"126"},{"desc":"127","fix":"128"},{"desc":"129","fix":"130"},{"desc":"131","fix":"132"},{"desc":"133","fix":"134"},{"desc":"135","fix":"136"},{"desc":"137","fix":"138"},{"desc":"139","fix":"140"},"Update the dependencies array to be: [user.password, user.password_confirmation, valid]",{"range":"141","text":"142"},"Update the dependencies array to be: [pattern, user.email, user.password, user.password_confirmation, valid]",{"range":"143","text":"144"},"Update the dependencies array to be: [headerData, isUpdate]",{"range":"145","text":"146"},"Update the dependencies array to be: [item, startDate, startTime]",{"range":"147","text":"148"},"Update the dependencies array to be: [endDate, endTime, item]",{"range":"149","text":"150"},"Update the dependencies array to be: [headerData, id]",{"range":"151","text":"152"},"Update the dependencies array to be: [find, input, items, setItemsDisplayed]",{"range":"153","text":"154"},"Update the dependencies array to be: [reorder, selected, setIsActiveSearchCalendar]",{"range":"155","text":"156"},[2087,2130],"[user.password, user.password_confirmation, valid]",[1846,1901],"[pattern, user.email, user.password, user.password_confirmation, valid]",[1129,1139],"[headerData, isUpdate]",[1844,1866],"[item, startDate, startTime]",[2094,2112],"[endDate, endTime, item]",[2875,2877],"[headerData, id]",[2523,2530],"[find, input, items, setItemsDisplayed]",[2704,2714],"[reorder, selected, setIsActiveSearchCalendar]"]